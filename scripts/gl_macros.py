#!/usr/bin/env python

import re

from operator import itemgetter
from urllib2 import urlopen

GLFW = 'https://raw.githubusercontent.com/glfw/glfw/3.0.4/include/GLFW/glfw3.h'
GLCOREARB = 'http://www.opengl.org/registry/api/GL/glcorearb.h'

def parse_header(file, prefix):
  header = urlopen(file)
  data = header.read()

  api = "{}API".format(prefix.upper())
  data = data.replace('APIENTRY', '')
  data = data.replace('(', ' (')
  data = re.sub("{} ((?:const|void) [^*(]*\*)".format(api), lambda x: "{} {} ".format(api, x.group(1).replace(' ', '-')), data)

  lines = [l.split() for l in data.split('\n') if l.startswith(api)]
  lines.sort(key=itemgetter(2))

  for tokens in lines:
    return_type = tokens[1].replace('-', ' ')
    method = tokens[2][len(prefix):]

    output_template = "GXY_{type}_{prefix}({M}, {m},{ethod}" + (", {return_type})" if return_type != "void" else ")")
    print output_template.format(
      type="VOID" if return_type == "void" else "AUTO",
      prefix=prefix.upper(),
      M=method[0],
      m=method[0].lower(),
      ethod=method[1:].replace(';', ''),
      return_type=return_type)

if __name__ == '__main__':
  print "namespace glfw {\n"
  print "// Generated by ./scripts/gl_macros.py"
  parse_header(GLFW, 'glfw')
  print "\n} // namespace glfw\n"

  print "namespace gl {\n"
  print "// Generated by ./scripts/gl_macros.py"
  parse_header(GLCOREARB, 'gl')
  print "\n} // namespace gl"
